import logging,time

from genpack_init import root_path,enable_systemd_service

def configure(ini):
    wifi_ssid = ini.get("_default", "wifi_ssid", fallback=None)
    if wifi_ssid is None:
        logging.debug("Leaving WiFi configuration.")
        return
    #else
    logging.debug("WiFi SSID: %s" % wifi_ssid)

    wifi_systemd_config_file = ini.get("_default", "wifi_systemd_config_file", fallback="54-wlan.network")
    wifi_mdns = ini.getboolean("_default", "wifi_mdns", fallback=True)
    wifi_llmnr = ini.getboolean("_default", "wifi_llmnr", fallback=True)
    wifi_ignore_dns = ini.getboolean("_default", "wifi_ignore_dns", fallback=False)
    wifi_ignore_gateway = ini.getboolean("_default", "wifi_ignore_gateway", fallback=False)
    wifi_required_for_online = ini.get("_default", "wifi_required_for_online", fallback=None)

    systemd_network_dir = root_path("/etc/systemd/network")
    systemd_network_dir.mkdir(parents=True,exist_ok=True)
    with open(systemd_network_dir.joinpath(wifi_systemd_config_file), "w") as f:
        f.write("# Automatically generated by genpack-init script %s\n" % __file__)
        f.write("[Match]\n")
        f.write("Type=wlan\n")
        f.write("WLANInterfaceType=station\n")
        f.write("SSID=%s\n" % wifi_ssid)
        f.write("[Network]\n")
        f.write("DHCP=yes\n")
        f.write("MulticastDNS=%s\n" % ("yes" if wifi_mdns else "no"))
        f.write("LLMNR=%s\n" % ("yes" if wifi_llmnr else "no"))
        f.write("[DHCPv4]\n")
        if wifi_ignore_dns:
            f.write("UseDNS=no\n")
        if wifi_ignore_gateway:
            f.write("UseRoutes=no\n")
        f.write("[DHCPv6]\n")
        if wifi_ignore_dns:
            f.write("UseDNS=no\n")
        f.write("[IPv6AcceptRA]\n")
        if wifi_ignore_dns:
            f.write("UseDNS=no\n")
        if wifi_ignore_gateway:
            f.write("UseGateway=no\n")
        f.write("[Link]\n")
        if wifi_required_for_online is not None:
            f.write("RequiredForOnline=%s\n" % wifi_required_for_online)
    logging.debug("%s created under /etc/systemd/network" % wifi_systemd_config_file)

    wpa_supplicant_dir = root_path("/etc/wpa_supplicant")
    wpa_supplicant_dir.mkdir(parents=True,exist_ok=True)

    wpa3 = ini.getboolean("_default", "wifi_wpa3", fallback=False)
    sae_pwe = ini.getint("_default", "wifi_sae_pwe", fallback=2 if wpa3 else None)
    country = ini.get("_default", "wifi_country", fallback=None)

    conf = wpa_supplicant_dir.joinpath("wpa_supplicant.conf")
    with open(conf, "w") as f:
        f.write("# Automatically generated by genpack-init script %s\n" % __file__)
        f.write("ctrl_interface=DIR=/run/wpa_supplicant\n")
        if country is not None:
            f.write("country=%s\n" % country)
        if sae_pwe is not None:
            f.write("sae_pwe=%d\n" % sae_pwe)
        f.write('network={\n\tssid="%s"\n' % wifi_ssid)
        wifi_key = ini.get("_default", "wifi_key", fallback=None)
        if wifi_key is not None:
            if wpa3:
                f.write('\tkey_mgmt=SAE\n')
                f.write('\tsae_password="%s"\n' % wifi_key)
                f.write('\tieee80211w=2\n')
            else:
                f.write('\tpsk="%s"\n' % wifi_key)
        else:
            f.write('\tkey_mgmt=NONE\n')
            logging.warning("WiFi key not set.  Using key_mgmt=NONE.")
        f.write('}\n')
        logging.debug("%s created" % conf)
    
    # regulation domain
    if country is not None:
        modprobe_dir = root_path("/etc/modprobe.d")
        modprobe_dir.mkdir(parents=True, exist_ok=True)
        modprobe_conf = modprobe_dir.joinpath("ieee80211_regdom.conf")
        with open(modprobe_conf, "w") as f:
            f.write("# Automatically generated by genpack-init script %s\n" % __file__)
            f.write("options cfg80211 ieee80211_regdom=%s\n" % country)

    enable_systemd_service("wpa_supplicant_any80211")

# mkdir sys/class/net/wlan0/wireless
# PYTHONPATH=/path/to/mock python3 wifi.py
if __name__ == "__main__":
    import argparse,configparser
    logging.basicConfig(level=logging.DEBUG)

    argparser = argparse.ArgumentParser()
    argparser.add_argument("--wpa3", default=False, action="store_true")
    argparser.add_argument("--public-wifi", default=False, action="store_true")
    args = argparser.parse_args()

    ini = configparser.ConfigParser()
    ini.add_section("_default")
    ini.set("_default", "wifi_ssid", "my_wifi")
    if not args.public_wifi:
        ini.set("_default", "wifi_key", "my_password")
    if args.wpa3:
        ini.set("_default", "wifi_wpa3", "yes")
    configure(ini)

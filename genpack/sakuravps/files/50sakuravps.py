import os,logging,subprocess

def truncate_after_second_space(s):
    splitted = s.split(maxsplit=2)
    if len(splitted) < 2: return s
    #else
    return splitted[0] + ' ' + splitted[1]

def set_sshd_addressfamily(addressfamily):
    if addressfamily not in ["any", "inet", "inet6"]:
        logging.error("invalid sshd AddressFamily: %s" % addressfamily)
        return False
    #else
    if not os.path.isfile("/etc/ssh/sshd_config"):
        logging.error("sshd_config not found")
        return False
    #else
    with open("/etc/ssh/sshd_config", "r") as f:
        for line in f:
            if line.startswith("AddressFamily "):
                if line[14:].strip() == addressfamily:
                    return True # already set
                else:
                    break

    return subprocess.call(["sed", "-i", "s/^#\\?AddressFamily .*/AddressFamily %s/" % addressfamily, "/etc/ssh/sshd_config"]) == 0

def configure(ini):
    # root password in encrypted form
    # echo -n "your_password" | openssl passwd -6 -stdin
    root_password =  ini.get("sakuravps", "root_password", fallback=None)
    if root_password:
        chpasswd = subprocess.Popen(["chpasswd", "-e"], stdin=subprocess.PIPE)
        chpasswd.communicate(("root:%s" % root_password).encode("utf-8"))
        if chpasswd.returncode == 0:
            logging.info("root password set")
        else:
            logging.error("failed to set root password")

    ssh_pubkey = ini.get("sakuravps", "ssh_pubkey", fallback=None)
    if ssh_pubkey:
        ssh_dir = "/root/.ssh"
        if not os.path.exists(ssh_dir): os.makedirs(ssh_dir)
        authorized_keys = os.path.join(ssh_dir, "authorized_keys")
        already_set = False
        if os.path.isfile(authorized_keys):
            with open(authorized_keys, "r") as f:
                ssh_pubkey_truncated = truncate_after_second_space(ssh_pubkey)
                for line in f:
                    if truncate_after_second_space(line) == ssh_pubkey_truncated:
                        already_set = True
                        break
        if already_set:
            logging.info("root ssh authorized_keys already set")
        else:
            with open(authorized_keys, "a") as f:
                f.write(ssh_pubkey + "\n")
            logging.info("root ssh authorized_keys set")

    ip_address = ini.get("sakuravps", "ip_address", fallback=None) # Address=/23
    ip_gateway = ini.get("sakuravps", "ip_gateway", fallback=None) # Gateway=
    dns = ini.get("sakuravps", "dns", fallback=None) # DNS=133.242.0.3
    fallback_dns = ini.get("sakuravps", "fallback_dns", fallback=None) # FallbackDNS=133.242.0.4
    ip6_address = ini.get("sakuravps", "ip6_address", fallback=None) # Address=/64
    ip6_gateway = ini.get("sakuravps", "ip6_gateway", fallback="fe80::1") # Gateway=fe80::1
    dns6 = ini.get("sakuravps", "dns6", fallback=None) # DNS=2401:2500::1(Ishikari) / 2001:e42::1(Tokyo)
    fallback_dns6 = ini.get("sakuravps", "fallback_dns6", fallback=None)

    network_file = "/etc/systemd/network/50-sakuravps-eth0.network"
    # if the vm is launching on /usr/bin/vm, no effective network file.
    if os.path.isdir("/sys/firmware/qemu_fw_cfg/by_name/opt/vmname"):
        network_file += "~"
    if not os.path.isfile(network_file):
        with open(network_file, "w") as f:
            f.write("# This file is generated by sakuravps.py\n")
            f.write("# To regenerate this file, remove it and reboot\n")
            f.write("[Match]\nName=eth0\n[Network]\n")
            if ip_address:  f.write("Address=%s\n" % ip_address)
            else:           f.write("#Address=w.x.y.z/23\n")
            if ip_gateway:  f.write("Gateway=%s\n" % ip_gateway)
            else:           f.write("#Gateway=w.x.y.z\n")
            if dns:         f.write("DNS=%s\n" % dns)
            else:           f.write("#DNS=133.242.0.3\n")
            if fallback_dns:    f.write("FallbackDNS=%s\n" % fallback_dns)
            else:               f.write("#FallbackDNS=133.242.0.4\n")
            if ip6_address: f.write("Address=%s\n" % ip6_address)
            else:           f.write("#Address=a:b:c:d:w:x:y:z/64\n")
            if ip6_gateway: f.write("Gateway=%s\n" % ip6_gateway)
            if dns6:        f.write("DNS=%s\n" % dns6)
            else:           f.write("#DNS=2401:2500::1(Ishikari) | 2001:e42::1(Tokyo)\n")
            if fallback_dns6:   f.write("FallbackDNS=%s\n" % fallback_dns6)
            f.write("MulticastDNS=no\nLLMNR=no\n")
        logging.info("network configured")

    sshd_addressfamily = ini.get("sakuravps", "sshd_addressfamily", fallback=None)
    if sshd_addressfamily: 
        if set_sshd_addressfamily(sshd_addressfamily):
            logging.info("sshd AddressFamily set")
        else:
            logging.error("failed to set sshd AddressFamily")

if __name__ == "__main__":
    import sys
    from configparser import ConfigParser
    ini = ConfigParser()
    ini.read(sys.argv[1])
    configure(ini)